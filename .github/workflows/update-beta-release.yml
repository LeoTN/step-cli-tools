name: Update latest beta release

on:
  workflow_dispatch:

  push:
    branches:
      - development
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/**"
      - ".gitattributes"
      - ".gitignore"
      - "LICENSE"
      - "README.md"

jobs:
  figure_out_release_version:
    name: Evaluate correct beta release version
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      beta_version: ${{ steps.set_latest_release_version_id.outputs.FINAL_BETA_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install packaging
        run: python3 -m pip install packaging --upgrade

      - name: Get latest release version
        id: get_latest_release_version_id
        run: |
          python3 - <<EOF
          import subprocess
          from packaging.version import parse

          releases = subprocess.run(
              ["gh", "release", "list", "--repo", "$GITHUB_REPOSITORY", "--limit", "50"],
              capture_output=True, text=True
          ).stdout.splitlines()

          versions = []
          for line in releases:
              tag = line.split()[0]
              versions.append(parse(tag))

          latest = max(versions)
          print(f"[INFO] Latest release (semver): {latest}")
          with open("/github/env", "a") as f:
              f.write(f"LATEST_RELEASE={latest}\n")
          EOF

      - name: Figure out beta release version
        id: set_latest_release_version_id
        run: |
          CURRENT_VERSION="$LATEST_RELEASE"

          # Check if the current version is already a beta
          if [[ "$CURRENT_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)b([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            BETA="${BASH_REMATCH[4]}"

            # Increment beta version
            NEXT_BETA=$((BETA + 1))
            FINAL_BETA_VERSION="${MAJOR}.${MINOR}.${PATCH}b${NEXT_BETA}"

          # If current version is a stable release
          elif [[ "$CURRENT_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"

            # Increment patch and start beta at 0
            PATCH=$((PATCH + 1))
            FINAL_BETA_VERSION="${MAJOR}.${MINOR}.${PATCH}b0"

          else
            echo "[ERROR] Could not parse latest release version: $CURRENT_VERSION"
            exit 1
          fi

          echo "[INFO] New beta version: $FINAL_BETA_VERSION"
          echo "FINAL_BETA_VERSION=$FINAL_BETA_VERSION" >> $GITHUB_OUTPUT

  start_ci_workflow:
    name: Launch release workflow
    needs: figure_out_release_version
    permissions:
      contents: write
    uses: ./.github/workflows/release.yml
    with:
      version: "${{ needs.figure_out_release_version.outputs.beta_version }}"
    secrets: inherit
